// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  username      String?    @unique
  image    String?
  accounts Account[]
  sessions Session[]
  posts Post[]
  comments Comment[]
  commentVotes CommentVote[]
  votes Vote[]
  subreddits  Subreddit[]
  subscriptions Subscription[]
}


model Subreddit {
  id    String    @id @default(cuid())
  name  String    @unique
  createdAt DateTime  @default(now())
  UpdatedAt DateTime  @updatedAt
  posts  Post[]
  creator User? @relation(fields: [creatorId], references: [id])
  creatorId String
  subscribers Subscription[]

  @@index([name])
}

model Subscription {
  user User @relation(fields: [userId], references: [id])
  userId String
  subreddit Subreddit @relation(fields: [subbredditId], references: [id])
  subbredditId String
  @@id([userId, subbredditId])
}

model Post {
  id    String    @id @default(cuid())
  title String
  createdAt DateTime  @default(now())
  UpdatedAt DateTime  @updatedAt
  content Json?
  subredditId String
  authorId String

  subreddit Subreddit @relation(fields: [subredditId], references: [id])
  author User @relation(fields: [authorId], references: [id])
  votes Vote[]
  comments Comment[]
}

model Comment {
  id    String    @id @default(cuid())
  text String
  createdAt DateTime  @default(now())
  UpdatedAt DateTime  @updatedAt
  authorId String
  postId String
  author User @relation(fields: [authorId], references: [id])
  post Post @relation(fields: [postId], references: [id])
  replyToId String?
  replyTo Comment? @relation("ReplyTo", fields: [replyToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies Comment[] @relation("ReplyTo")
  votes CommentVote[]
}

enum VoteType{
  UP
  DOWN
}

model CommentVote{
  user  User @relation(fields: [userId], references: [id])
  comment Comment @relation(fields: [commentId], references: [id])
  userId String
  commentId String
  type  VoteType
  @@id([userId, commentId])
}

model Vote{
  user  User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])
  userId String
  postId String
  type  VoteType
  @@id([userId, postId])
}